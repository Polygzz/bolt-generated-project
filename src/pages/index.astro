---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import AddSession from '../components/AddSession.astro';
import TrainingSession from '../components/TrainingSession.astro';
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseAnonKey)

let user = null;

async function authCheck() {
  const { data: { user: currentUser } } = await supabase.auth.getUser()
  if (currentUser) {
    console.log("User is signed in:", currentUser);
    user = currentUser;
  } else {
    console.log("User is not signed in");
    user = null;
  }
}

await authCheck();

async function signOut() {
  const { error } = await supabase.auth.signOut()
  if (error) {
    console.log('Error signing out:', error.message)
  } else {
    console.log('User signed out');
    window.location.href = '/';
  }
}
---

<Layout>
  <Navigation />
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8 text-center text-textPrimary">Soccer Training Tracker</h1>

    <!-- Weather Container -->
    <div class="weather-container mb-8 bg-boxColor p-6 rounded-lg shadow-md transition-shadow duration-300 hover:shadow-lg">
      <h2 class="text-xl font-bold mb-4 text-textPrimary">Local Weather</h2>
      <div id="weatherDisplay" class="flex items-center">
        <p class="text-textSecondary">Loading weather information...</p>
      </div>
      <div id="weatherRecommendation" class="mt-4 p-4 bg-accent text-white rounded">
        <h3 class="font-bold mb-2">Today's Training Recommendation:</h3>
        <p>Workout recommendations will appear here based on weather conditions.</p>
      </div>
      <div class="mt-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="location">
          Change Location
        </label>
        <div class="flex">
          <input
            type="text"
            id="location"
            placeholder="Enter city name"
            class="shadow appearance-none border rounded-l w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          />
          <button
            id="updateLocationBtn"
            class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-r focus:outline-none focus:shadow-outline"
          >
            Update
          </button>
        </div>
      </div>
    </div>

    <div class="bg-boxColor p-6 rounded-lg shadow-md mb-8 transition-shadow duration-300 hover:shadow-lg">
      <h2 class="text-xl font-bold mb-4 text-textPrimary">Training Summary</h2>
      <div class="text-3xl font-bold text-primary" id="totalMinutes">0 minutes</div>
      <p class="text-textSecondary">Total training time</p>
    </div>

    <AddSession />

    <div id="sessions">
      <!-- Sessions will be populated by JavaScript -->
    </div>
  </main>
</Layout>

<script>
  const sessionsContainer = document.getElementById('sessions');
  const totalMinutesElement = document.getElementById('totalMinutes');
  const sessions = JSON.parse(localStorage.getItem('trainingSessions') || '[]');
  const updateLocationBtn = document.getElementById('updateLocationBtn');
  const locationInput = document.getElementById('location');

  // Calculate total minutes
  const totalMinutes = sessions.reduce((total, session) => total + parseInt(session.duration), 0);
  if (totalMinutesElement) {
    totalMinutesElement.textContent = `${totalMinutes} minutes`;
  }

  // Sort sessions by date (newest first)
  sessions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

  // Display sessions
  if (sessionsContainer) {
    sessionsContainer.innerHTML = sessions.map(session => `
      <div class="bg-white p-6 rounded-lg shadow-md mb-4">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold">${session.date}</h3>
          <span class="text-gray-600">${session.duration} minutes</span>
        </div>
        <div class="mb-3">
          <h4 class="font-medium mb-2">Skills Practiced:</h4>
          <div class="flex flex-wrap gap-2">
            ${session.skills.map(skill => `
              <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
                ${skill}
              </span>
            `).join('')}
          </div>
        </div>
        <p class="text-gray-700">${session.notes}</p>
      </div>
    `).join('');
  }

  // Weather functionality
  const API_KEY = 'af770edc03304b4e8b6213518251604';

  async function getWeatherData() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(async position => {
        const lat = position.coords.latitude;
        const lon = position.coords.longitude;

        try {
          const response = await fetch('https://api.openweathermap.org/data/2.5/weather?lat=' + lat + '&lon=' + lon + '&units=metric&appid=' + API_KEY);
          const data = await response.json();
          displayWeather(data);
        } catch (error) {
          console.error('Error fetching weather data:', error);
          document.getElementById('weatherDisplay').innerHTML = '<p>Unable to fetch weather data. Please try again later.</p>';
        }
      }, error => {
        console.error('Error getting location:', error);
        document.getElementById('weatherDisplay').innerHTML =
          '<p>Location access denied. Please enable location services to see weather information.</p>';
      });
    } else {
      document.getElementById('weatherDisplay').innerHTML =
        '<p>Geolocation is not supported by this browser.</p>';
    }
  }

  async function updateWeatherByLocation(location) {
    if (!location) return;

    try {
      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&appid=${API_KEY}`);
      if (!response.ok) {
        throw new Error('Location not found');
      }
      const data = await response.json();
      displayWeather(data);
    } catch (error) {
      console.error('Error:', error);
      document.getElementById('weatherDisplay').innerHTML = '<p>Location not found. Please try again later.</p>';
    }
  }

  function displayWeather(data) {
    const temp = Math.round(data.main.temp);
    const description = data.weather[0].description;
    const iconCode = data.weather[0].icon;
    const iconUrl = `https://openweathermap.org/img/wn/${iconCode}@2x.png`;
    const windSpeed = data.wind.speed;
    const humidity = data.main.humidity;

    document.getElementById('weatherDisplay').innerHTML = `
      <img src="${iconUrl}" alt="${description}" class="w-16 h-16">
      <div class="ml-4">
        <div class="text-2xl font-bold">${temp}Â°C</div>
        <div class="capitalize">${description}</div>
        <div class="text-sm text-gray-600">Wind: ${windSpeed} m/s | Humidity: ${humidity}%</div>
      </div>
    `;

    updateWorkoutRecommendations(data);
  }

  function updateWorkoutRecommendations(weatherData) {
    const temp = weatherData.main.temp;
    const weatherCondition = weatherData.weather[0].main;
    const windSpeed = weatherData.wind.speed;
    let recommendation = '';

    // Temperature-based recommendations
    if (temp > 30) {
      recommendation = 'Extreme heat alert! Consider indoor training or schedule your workout early morning or late evening. Stay hydrated and take frequent breaks.';
    } else if (temp > 25) {
      recommendation = 'Hot conditions. Reduce intensity, stay hydrated, and consider shorter sessions. Technical drills might be better than high-intensity runs.';
    } else if (temp < 5) {
      recommendation = 'Cold conditions. Extend your warm-up period and wear layers. Focus on maintaining movement to stay warm.';
    } else if (temp < 0) {
      recommendation = 'Freezing conditions! Consider indoor training. If outdoors, proper warm-up is essential and watch for icy patches.';
    } else {
      recommendation = 'Ideal temperature for training. All workout types recommended.';
    }

    // Weather condition recommendations
    if (weatherCondition === 'Rain') {
      recommendation += ' Rainy conditions may affect ball control. Consider ball mastery drills under cover or focused technical work.';
    } else if (weatherCondition === 'Snow') {
      recommendation += ' Snowy conditions - indoor training recommended. If outdoors, focus on balance and core stability work.';
    } else if (weatherCondition === 'Thunderstorm') {
      recommendation += ' WARNING: Thunderstorms detected. Move indoors immediately for safety.';
    } else if (weatherCondition === 'Clear' && temp > 20) {
      recommendation += ' Clear skies - perfect for all training activities. Consider sunscreen if training for extended periods.';
    }

    // Wind recommendations
    if (windSpeed > 10) {
      recommendation += ' High winds may affect ball flight. Good opportunity to practice adapting to challenging conditions.';
    }

    document.getElementById('weatherRecommendation').innerHTML = `
      <h3 class="font-bold mb-2">Today's Training Recommendation:</h3>
      <p>${recommendation}</p>
    `;
  }

  // Event Listeners
  updateLocationBtn?.addEventListener('click', () => {
    const location = locationInput?.value;
    if (location) {
      updateWeatherByLocation(location);
    }
  });

  // Also trigger update when Enter is pressed
  locationInput?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      const location = locationInput.value;
      if (location) {
        updateWeatherByLocation(location);
      }
    }
  });

  // Initialize weather data on page load
  getWeatherData();

  // Refresh weather data every 30 minutes
  setInterval(getWeatherData, 30 * 60 * 1000);
</script>

<script>
  async function signOut() {
    const { error } = await supabase.auth.signOut()
    if (error) {
      console.log('Error signing out:', error.message)
    } else {
      console.log('User signed out');
      window.location.href = '/';
    }
  }
</script>
