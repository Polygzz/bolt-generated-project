---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
---

<Layout>
  <Navigation />
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">Training Calendar</h1>
    
    <div class="flex justify-between items-center mb-6">
      <button id="prevMonth" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Previous Month
      </button>
      <h2 id="currentMonth" class="text-xl font-semibold">January 2024</h2>
      <button id="nextMonth" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Next Month
      </button>
    </div>

    <div id="calendar" class="bg-white p-6 rounded-lg shadow-md mb-8">
      <div class="grid grid-cols-7 gap-2 mb-4">
        <div class="text-center font-bold">Sun</div>
        <div class="text-center font-bold">Mon</div>
        <div class="text-center font-bold">Tue</div>
        <div class="text-center font-bold">Wed</div>
        <div class="text-center font-bold">Thu</div>
        <div class="text-center font-bold">Fri</div>
        <div class="text-center font-bold">Sat</div>
      </div>
      <div id="calendar-days" class="grid grid-cols-7 gap-2">
        <!-- Calendar days will be populated by JavaScript -->
      </div>
    </div>

    <!-- Add Workout Modal -->
    <div id="addWorkoutModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div class="bg-white p-6 rounded-lg w-full max-w-lg">
        <h3 id="modalTitle" class="text-xl font-bold mb-4">Add Workout to Calendar</h3>
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2">Date</label>
          <input type="date" id="workoutDate" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" readonly>
        </div>
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2">Workout Type</label>
          <select id="workoutType" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            <option value="gym">Gym Workout</option>
            <option value="soccer">Soccer Training</option>
          </select>
        </div>
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2">Select Workout</label>
          <select id="workoutSelect" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </select>
        </div>
        <input type="hidden" id="editWorkoutIndex" value="-1">
        <div class="flex justify-end space-x-2">
          <button id="cancelButton" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">Cancel</button>
          <button id="saveButton" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">Save</button>
          <button id="deleteButton" class="hidden bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">Delete</button>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  let currentDate = new Date();
  const sessions = JSON.parse(localStorage.getItem('trainingSessions') || '[]');
  const gymWorkouts = JSON.parse(localStorage.getItem('gymWorkouts') || '[]');
  const suggestedWorkouts = JSON.parse(localStorage.getItem('suggestedWorkouts') || '[]');
  const calendarWorkouts = JSON.parse(localStorage.getItem('calendarWorkouts') || '[]');
  const calendarDays = document.getElementById('calendar-days');
  const currentMonthElement = document.getElementById('currentMonth');
  const modal = document.getElementById('addWorkoutModal');
  const modalTitle = document.getElementById('modalTitle');
  const workoutDateInput = document.getElementById('workoutDate');
  const workoutTypeSelect = document.getElementById('workoutType');
  const workoutSelect = document.getElementById('workoutSelect');
  const editWorkoutIndex = document.getElementById('editWorkoutIndex');
  const saveButton = document.getElementById('saveButton');
  const deleteButton = document.getElementById('deleteButton');
  const cancelButton = document.getElementById('cancelButton');

  function updateWorkoutOptions() {
    const type = workoutTypeSelect.value;
    const workouts = type === 'gym' ? gymWorkouts : suggestedWorkouts;
    workoutSelect.innerHTML = workouts.map(workout => 
      `<option value="${workout.title || workout.name}">${workout.title || workout.name}</option>`
    ).join('');
  }

  workoutTypeSelect.addEventListener('change', updateWorkoutOptions);

  function openAddModal(date) {
    modalTitle.textContent = "Add Workout to Calendar";
    workoutDateInput.value = date;
    editWorkoutIndex.value = "-1";
    workoutTypeSelect.value = "gym";
    updateWorkoutOptions();
    deleteButton.classList.add('hidden');
    modal.classList.remove('hidden');
  }
  
  function openEditModal(workout, index) {
    modalTitle.textContent = "Edit Workout";
    workoutDateInput.value = workout.date;
    workoutTypeSelect.value = workout.type;
    updateWorkoutOptions();
    setTimeout(() => {
      workoutSelect.value = workout.title;
    }, 10);
    editWorkoutIndex.value = index;
    deleteButton.classList.remove('hidden');
    modal.classList.remove('hidden');
  }

  function closeModal() {
    modal.classList.add('hidden');
  }

  function saveWorkout() {
    const index = parseInt(editWorkoutIndex.value);
    const workoutData = {
      date: workoutDateInput.value,
      type: workoutTypeSelect.value,
      title: workoutSelect.value
    };
    
    if (index >= 0) {
      // Edit existing workout
      calendarWorkouts[index] = workoutData;
    } else {
      // Add new workout
      calendarWorkouts.push(workoutData);
    }
    
    localStorage.setItem('calendarWorkouts', JSON.stringify(calendarWorkouts));
    closeModal();
    generateCalendar();
  }
  
  function deleteWorkout() {
    const index = parseInt(editWorkoutIndex.value);
    if (index >= 0 && confirm('Are you sure you want to delete this workout?')) {
      calendarWorkouts.splice(index, 1);
      localStorage.setItem('calendarWorkouts', JSON.stringify(calendarWorkouts));
      closeModal();
      generateCalendar();
    }
  }

  function updateMonthDisplay() {
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    currentMonthElement.textContent = `${months[currentDate.getMonth()]} ${currentDate.getFullYear()}`;
  }

  document.getElementById('prevMonth').addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() - 1);
    updateMonthDisplay();
    generateCalendar();
  });

  document.getElementById('nextMonth').addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() + 1);
    updateMonthDisplay();
    generateCalendar();
  });
  
  // Add event listeners for modal buttons
  saveButton.addEventListener('click', saveWorkout);
  deleteButton.addEventListener('click', deleteWorkout);
  cancelButton.addEventListener('click', closeModal);
  
  function generateCalendar() {
    if (!calendarDays) return;
    
    calendarDays.innerHTML = '';
    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    
    // Add empty cells for days before the first of the month
    for (let i = 0; i < firstDay.getDay(); i++) {
      const emptyDay = document.createElement('div');
      emptyDay.className = 'h-24 bg-gray-50 rounded';
      calendarDays.appendChild(emptyDay);
    }
    
    // Add cells for each day of the month
    for (let date = 1; date <= lastDay.getDate(); date++) {
      const dayCell = document.createElement('div');
      const currentDateString = new Date(currentDate.getFullYear(), currentDate.getMonth(), date).toISOString().split('T')[0];
      
      const daysSessions = sessions.filter(session => session.date === currentDateString);
      const daysWorkouts = calendarWorkouts.filter(workout => workout.date === currentDateString);
      
      dayCell.className = 'h-24 bg-white border rounded p-2 overflow-y-auto';
      
      // Create date container
      const dateContainer = document.createElement('div');
      dateContainer.className = `font-bold ${date === new Date().getDate() && currentDate.getMonth() === new Date().getMonth() && currentDate.getFullYear() === new Date().getFullYear() ? 'text-blue-600' : ''} mb-1 cursor-pointer hover:text-blue-500`;
      dateContainer.textContent = date;
      dateContainer.addEventListener('click', () => openAddModal(currentDateString));
      dayCell.appendChild(dateContainer);
      
      // Add training sessions
      daysSessions.forEach(session => {
        const sessionElement = document.createElement('div');
        sessionElement.className = 'text-xs bg-blue-100 text-blue-800 rounded px-1 py-0.5 mb-1';
        sessionElement.textContent = `Training: ${session.duration}min`;
        dayCell.appendChild(sessionElement);
      });
      
      // Add workouts with edit functionality
      daysWorkouts.forEach((workout, index) => {
        const workoutElement = document.createElement('div');
        workoutElement.className = `text-xs ${workout.type === 'gym' ? 'bg-green-100 text-green-800' : 'bg-purple-100 text-purple-800'} rounded px-1 py-0.5 mb-1 cursor-pointer hover:opacity-80`;
        workoutElement.textContent = workout.title;
        workoutElement.addEventListener('click', (e) => {
          e.stopPropagation();
          openEditModal(workout, calendarWorkouts.indexOf(workout));
        });
        dayCell.appendChild(workoutElement);
      });
      
      calendarDays.appendChild(dayCell);
    }
  }
  
  updateMonthDisplay();
  generateCalendar();
</script>
