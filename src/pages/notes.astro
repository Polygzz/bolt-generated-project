---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
---

<Layout>
  <Navigation />
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">Training Notes</h1>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <form id="addNote" class="bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-xl font-bold mb-4">Add Note</h2>
        
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2" for="title">
            Title
          </label>
          <input
            type="text"
            id="title"
            name="title"
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>

        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2" for="content">
            Content
          </label>
          <textarea
            id="content"
            name="content"
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            rows="4"
            required
          ></textarea>
        </div>

        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2" for="image">
            Image URL
          </label>
          <input
            type="url"
            id="image"
            name="image"
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            placeholder="https://example.com/image.jpg"
          />
        </div>

        <button
          type="submit"
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
        >
          Save Note
        </button>
      </form>

      <div id="notesList" class="space-y-4">
        <!-- Notes will be populated by JavaScript -->
      </div>
    </div>
  </main>
</Layout>

<script>
  const form = document.getElementById('addNote');
  const notesList = document.getElementById('notesList');
  const notes = JSON.parse(localStorage.getItem('trainingNotes') || '[]');

  function displayNotes() {
    if (notesList) {
      notesList.innerHTML = notes.map((note, index) => `
        <div class="bg-white p-6 rounded-lg shadow-md">
          ${note.image ? `
            <img src="${note.image}" alt="${note.title}" class="w-full h-48 object-cover rounded-lg mb-4"/>
          ` : ''}
          <h3 class="text-lg font-bold mb-2">${note.title}</h3>
          <p class="text-gray-700 mb-4">${note.content}</h3>
          <p class="text-sm text-gray-500 mb-4">${note.date}</p>
          <div class="flex space-x-2">
            <button
              onclick="editNote(${index})"
              class="bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            >
              Edit
            </button>
            <button
              onclick="deleteNote(${index})"
              class="bg-deleteButton hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            >
              Delete
            </button>
          </div>
        </div>
      `).join('');
    }
  }

  function editNote(index) {
    const note = notes[index];
    
    // Create a form for editing
    const form = document.createElement('form');
    form.innerHTML = `
      <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
        <div class="bg-white p-6 rounded-lg w-full max-w-lg">
          <h3 class="text-xl font-bold mb-4">Edit Note</h3>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Title</label>
            <input type="text" value="${note.title}" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" name="title">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Content</label>
            <textarea class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" name="content" rows="4">${note.content}</textarea>
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Image URL</label>
            <input type="url" value="${note.image || ''}" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" name="image">
          </div>
          <div class="flex justify-end space-x-2">
            <button type="button" onclick="this.closest('form').remove()" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">Cancel</button>
            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">Save</button>
          </div>
        </div>
      </div>
    `;

    document.body.appendChild(form);

    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      
      notes[index] = {
        ...note,
        title: formData.get('title'),
        content: formData.get('content'),
        image: formData.get('image')
      };

      localStorage.setItem('trainingNotes', JSON.stringify(notes));
      displayNotes();
      form.remove();
    });
  }

  function deleteNote(index) {
    if (confirm('Are you sure you want to delete this note?')) {
      notes.splice(index, 1);
      localStorage.setItem('trainingNotes', JSON.stringify(notes));
      displayNotes();
    }
  }

  form?.addEventListener('submit', (e) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    
    const newNote = {
      title: formData.get('title'),
      content: formData.get('content'),
      image: formData.get('image'),
      date: new Date().toLocaleDateString()
    };

    notes.unshift(newNote);
    localStorage.setItem('trainingNotes', JSON.stringify(notes));
    displayNotes();
    form.reset();
  });

  // Make functions globally accessible
  window.editNote = editNote;
  window.deleteNote = deleteNote;

  displayNotes();
</script>
